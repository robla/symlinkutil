#!/bin/bash

# pushlink: push the directory for a given symlink onto the stack
pushlink () { if [ -d $1 ]; then pushd $(chase $1); else pushd $(dirname $(chase $1)) ; fi;}

# cdlink: resolve target with readlink -f, then cd to that
cdlink () {
  if [ -z "$1" ]; then
    printf "usage: cdlink <target>\n"
    printf "\n"
    printf "Resolves <target> with readlink -f, then changes to that "
    printf "directory\n"
  else
    if [ -d $1 ]; then
      cd "$(readlink -f $1)"
    else
      if [ -f $1 ]; then
        cd $(dirname "$(readlink -f $1)")
      else
        printf "File not found: '$1'\n"
      fi
    fi
  fi
}

cdlink-myxtrim () {
  if [ -z "$1" ]; then
    cdlink .
  else
    cdlink "$1"
  fi
  cd "$(myxtrim)"
}

alias cdl='cdlink-myxtrim'

tcdl () {
  # cdl $1
  cdlink-myxtrim $1
  # jtb
  tagbasecd
}

alias rl='readlink -f'

# mkdirreadlink: fix a dead symlink by creating a directory
mkdirreadlink () { mkdir $(readlink "$1") ; }

alias mrl='mkdirreadlink'

# FIXME: generalize this so that it works for more than just tags
# (e.g. "brokenlinks", not just "brokentags")
brokentags () {
  pushd $(tagbase)
  find . -xtype l | xargs ls -l
  popd
}

alias tagsbroken='brokentags'

# tagbase counterpart to "urf" (userrootfix)
# tbf = tagbase fix
alias tbf="tagbase -l"
alias turf="tagbase -l"

readlink-f-fixlink () {
  (
  if [ -z "$1" ]; then
    echo "usage: readlink-f-fixlink arg1"
    echo "   arg1: the link to fix"
    exit;
  fi
  if [[ -L "$1" && -d "$1" ]]; then
    linkname="$1"
    final="$(readlink -f $linkname)"
    rm "$linkname"
    ln -s "$final" "$linkname"
  else
    echo "$1 doesn't seem to be a link"
  fi
  )
}

alias rlf="readlink-f-fixlink"
